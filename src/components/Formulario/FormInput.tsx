/* eslint-disable no-unused-vars *//* eslint-disable @typescript-eslint/no-unused-vars */'use client';import { Autocomplete, Switch, TextField, Tooltip } from '@mui/material';import { DatePicker } from '@mui/x-date-pickers/DatePicker';import { useEffect, useState } from 'react';import { Controller, useFormContext } from 'react-hook-form';import Flex from '../Flex/Flex';import FormItem from './FormItem';import type { FormInputProps } from '../../types/FormInputProps';const FormInput = ({  type,  name,  label,  value,  defaultValue,  placeholder,  mode = '',  error,  width = '200px',  height = '35px',  options,  required = false,  loading,  rangeDate = false,  tooltip = true,  formItemStyle = {},  formStyle = {},  onChange,  ...rest}: FormInputProps) => {  const { control, getFieldState, watch, formState, getValues } =    useFormContext();  const inputWatch = watch(name);  const [tooltipStr, setTooltipStr] = useState<string[]>([]);  const renderError = (name: string) => {    const fieldState = getFieldState(name, formState);    return fieldState?.error?.message ?? '';  };  const getLabel = () =>    label ? (      <div className="label-form">        <label          htmlFor={name}          title={label}          style={{            color: !!renderError(name) ? '#d32f2f' : 'rgba(0, 0, 0, 0.87)',          }}        >          {required && <span className="form-required">*</span>}          {label}        </label>      </div>    ) : (      <></>    );  const getTextTooltip = () => {    const str = getValues(name);    if (!str) {      setTooltipStr([]);      return;    }    if (typeof str === 'string') {      setTooltipStr([str]);    } else if (typeof str === 'object') {      setTooltipStr(!mode ? [str.label] : [...tooltipStr, str.label]);    } else {      setTooltipStr([        options?.find(e => e?.value === str?.value)?.label,      ] as string[]);    }  };  useEffect(() => {    //! Se resetea el valor del tooltip    if (tooltip && !inputWatch) {      getTextTooltip();    }  }, [inputWatch]);  switch (type) {    case 'input':    default:      return (        <>          <Controller            control={control}            name={name}            render={({              field: { onChange: onChangeForm, onBlur, value, ref },            }) => (              <FormItem error={renderError(name)} style={{ ...formItemStyle }}>                <TextField                  ref={ref}                  id={name}                  error={!!renderError(name)}                  label={getLabel()}                  style={{                    width,                    height,                  }}                  value={value || ''}                  placeholder={placeholder}                  onChange={e => {                    onChangeForm(e.target.value);                    if (typeof onChange === 'function') {                      onChange(e.target.value);                    }                  }}                  size="small"                  variant="standard"                  {...rest}                />              </FormItem>            )}          />        </>      );    case 'select':      const props: any = {};      if (mode === 'multiple') {        props.mode = 'multiple';      }      return (        <Controller          control={control}          name={name}          render={({            field: { onChange: onChangeForm, onBlur, value, ref },          }) => (            <FormItem error={renderError(name)} style={{ ...formItemStyle }}>              <Tooltip                title={                  tooltip ? (                    tooltipStr?.filter(e => Boolean(e))?.length === 0 ? (                      ''                    ) : (                      <>                        <Flex direction="column">                          {tooltipStr?.map(e => (                            <span key={e}>{e}</span>                          ))}                        </Flex>                      </>                    )                  ) : (                    ''                  )                }              >                <Autocomplete                  ref={ref}                  id={name}                  style={{                    width,                    height,                    ...formStyle,                  }}                  value={options?.find(e => e.value === value)?.label || ''}                  options={options}                  loading={loading}                  onChange={(e, option: any) => {                    //! validar                    onChangeForm(option?.value);                    if (typeof onChange === 'function') {                      onChange(option?.value, e);                    }                    if (tooltip) {                      getTextTooltip();                    }                  }}                  renderInput={params => (                    <TextField                      {...params}                      value={options?.find(e => e.value === value)?.label || ''}                      label={getLabel()}                      placeholder={placeholder}                      error={!!renderError(name)}                      variant="standard"                    />                  )}                  {...props}                  {...rest}                />              </Tooltip>            </FormItem>          )}        />      );    case 'date':      //! Buscar RangePicker para MUI      // const { RangePicker } = DatePicker;      const dateFormat = 'DD/MM/YYYY';      return (        <>          <Controller            control={control}            name={name}            render={({              field: { onChange: onChangeForm, onBlur, value, ref },            }) => (              <FormItem error={renderError(name)} style={{ ...formItemStyle }}>                {rangeDate ? (                  <div></div>                ) : (                  <DatePicker                    ref={ref}                    label={getLabel()}                    value={value}                    slotProps={{                      textField: {                        variant: 'standard',                        color: !!renderError(name) ? 'error' : 'primary', //! Logica para agregar ERROR                      },                    }}                    defaultValue={value}                    onChange={(value, option) => {                      onChangeForm(value);                      if (typeof onChange === 'function') {                        onChange(value, option);                      }                    }}                    {...rest}                  />                )}              </FormItem>            )}          />        </>      );    case 'textarea':      //! Buscar TETAREA      return (        <>          <Controller            control={control}            name={name}            render={({              field: { onChange: onChangeForm, onBlur, value, ref },            }) => (              <FormItem error={renderError(name)} style={{ ...formItemStyle }}>                <TextField                  ref={ref}                  id={name}                  error={!!renderError(name)}                  label={getLabel()}                  style={{                    width,                    height,                  }}                  value={value}                  placeholder={placeholder}                  onChange={e => {                    onChangeForm(e.target.value);                    if (typeof onChange === 'function') {                      onChange(e.target.value);                    }                  }}                  size="small"                  variant="standard"                  multiline                  // maxRows={4}                  // rows={4}                  {...rest}                />              </FormItem>            )}          />        </>      );    case 'checkbox':      return <></>;    case 'radio':      return <></>;    case 'switch':      return (        <>          <Controller            control={control}            name={name}            render={({              field: { onChange: onChangeForm, onBlur, value, ref },            }) => (              <FormItem error={renderError(name)} style={{ ...formItemStyle }}>                <Switch                  ref={ref}                  id={name}                  value={value}                  defaultValue={defaultValue as string}                  onChange={(_, checked) => {                    onChangeForm(checked);                    if (typeof onChange === 'function') {                      onChange(checked);                    }                  }}                  color="primary"                  style={{                    // width,                    // height,                    ...formStyle,                  }}                  {...rest}                />              </FormItem>            )}          />        </>      );  }};export default FormInput;